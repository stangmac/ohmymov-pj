// __tests__/postController.test.js
const mongoose = require('mongoose');
const request = require('supertest');
const { MongoMemoryServer } = require('mongodb-memory-server');
const app = require('./app');  // ‚úÖ ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà app.js ‡∏ó‡∏µ‡πà Export Express app
const Post = require('./models/Post');
const Movie = require('./models/Movies');
const User = require('./models/User');

let mongoServer;
let userId, movieId, postId;

beforeAll(async () => {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏° MongoDB memory server
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
  await mongoose.connect(uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  const user = await User.create({
    username: 'testuser',
    password: '1234',
    email: 'test@example.com',
    gender: 'male',
    date: new Date(),
  });
  userId = user._id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Movie ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  const movie = await Movie.create({
    _id: new mongoose.Types.ObjectId(),
    title: 'Test Movie',
    movie_id: 999999,
    synopsis: 'This is a test synopsis.',
    release_date: '2020-01-01',
    year: '2020',
  });

  movieId = movie._id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Post ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏™‡πà user id (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
  const post = await Post.create({
    user: userId,
    content: 'This is an initial test post',
    tagged_movies: [movieId],
  });
  postId = post._id;
});

afterAll(async () => {
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe('üé¨ Post Feature Test Suite', () => {
  it('1Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (review)', async () => {
    const newPostContent = 'This is a great movie!';
    const res = await request(app)
      .post('/posts/create') // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö router ‡πÉ‡∏ô services/postRoute.js
      .set('x-user-id', userId.toString())
      .send({
        tagged_movies: [movieId.toString()],
        content: newPostContent,
      });

    expect(res.statusCode).toBe(302); // ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞ redirect ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô DB ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const post = await Post.findOne({ content: newPostContent });
    expect(post).toBeTruthy();
    expect(post.content).toBe(newPostContent);
    expect(post.user.toString()).toBe(userId.toString());

    postId = post._id; // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  });

  it('2Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ', async () => {
    const res = await request(app).get('/posts');

    expect(res.statusCode).toBe(200);
    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å postController.js render ‡πÄ‡∏õ‡πá‡∏ô HTML, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö text ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô HTML
    expect(res.text).toContain('This is a great movie!'); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    expect(res.text).toContain('testuser'); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
  });

  it('3Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ', async () => {
    const commentContent = '‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö';
    const res = await request(app)
      .post(`/posts/comment/${postId}`)
      .set('x-user-id', userId.toString())
      .send({ content: commentContent });

    expect(res.statusCode).toBe(302); // ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞ redirect

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå
    const post = await Post.findById(postId);
    expect(post.comments.length).toBeGreaterThanOrEqual(1);
    expect(post.comments[0].content).toBe(commentContent);
    expect(post.comments[0].user.toString()).toBe(userId.toString());
  });

  it('4Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ', async () => {
    const res = await request(app)
      .post(`/posts/like/${postId}`)
      .set('x-user-id', userId.toString());

    expect(res.statusCode).toBe(302); // ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞ redirect

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô likes
    const post = await Post.findById(postId);
    expect(post.likes.length).toBe(1);
    expect(post.likes[0].toString()).toBe(userId.toString());
  });
});