const mongoose = require('mongoose');
const client = require('./services/elasticsearch');
const fs = require('fs');

mongoose.connect('mongodb+srv://admin:720272297234@cluster0.tah8c.mongodb.net/ohmymov', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const Movie = mongoose.model('movie', new mongoose.Schema({}, { strict: false }), 'movie');

async function deleteAndSyncMovies() {
    try {
        const mongoMovieCount = await Movie.countDocuments({});
        console.log(`üé¨ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô MongoDB: ${mongoMovieCount}`);

        const indexExists = await client.indices.exists({ index: 'movie' });

        if (indexExists) {
            console.log('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö Index "movie" ‡πÉ‡∏ô Elasticsearch...');
            await client.indices.delete({ index: 'movie' });
        } else {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Index "movie" ‡πÉ‡∏´‡πâ‡∏•‡∏ö (‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)');
        }

        console.log('üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Index "movie" ‡πÉ‡∏´‡∏°‡πà...');
        await client.indices.create({ index: 'movie' });

        const movies = await Movie.find({});
        console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á Sync ‡∏´‡∏ô‡∏±‡∏á ${movies.length} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å MongoDB...`);

        if (movies.length === 0) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Sync');
            return;
        }

        let bulkBody = [];
        let syncedCount = 0;
        let failedMovies = [];
        let failedErrors = [];

        for (let movie of movies) {
            if (!movie.title || !movie.movie_id) {
                console.warn(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${movie._id}`);
                continue;
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á `watch_count` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏™‡∏°‡∏≠
            let watchCount = Number(movie.watch_count);
            if (isNaN(watchCount)) {
                watchCount = 0; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ "Unknown" ‡πÄ‡∏õ‡πá‡∏ô 0
            }

            bulkBody.push({ index: { _index: 'movie', _id: movie._id.toString() } });
            bulkBody.push({
                movie_id: movie.movie_id,
                title: movie.title,
                genres: movie.genres || [],
                synopsis: movie.synopsis || "No synopsis available",
                keywords: movie.keywords || [],
                cast: Array.isArray(movie.cast) ? movie.cast.map(c => (c.national_name || c)) : [],
                crew: Array.isArray(movie.crew) ? movie.crew.map(c => (c.national_name || c)) : [],
                year: movie.year || "Unknown",
                release_date: movie.release_date || "Unknown",
                popularity_score: movie.popularity_score || 0,
                watch_count: watchCount, // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
                poster_url: movie.poster_url && Array.isArray(movie.poster_url) && movie.poster_url.length > 0 
                            ? movie.poster_url[0] 
                            : null
            });

            syncedCount++;

            if (bulkBody.length >= 500) {
                try {
                    const response = await client.bulk({ refresh: "wait_for", body: bulkBody });
                    if (response.errors) {
                        console.error(`‚õî ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Sync (‡∏ö‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á Elasticsearch)`);
                        response.items.forEach((item, index) => {
                            if (item.index && item.index.error) {
                                console.error(`‚ùå ERROR (${item.index.status}):`, item.index.error);
                                failedMovies.push(bulkBody[index * 2 + 1]);
                                failedErrors.push(item.index.error);
                            }
                        });
                    }
                } catch (err) {
                    console.error(`‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Sync:`, err);
                }
                bulkBody = [];
                console.log(`‚úÖ Synced ${syncedCount}/${movies.length} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á...`);
            }
        }

        if (bulkBody.length > 0) {
            try {
                const response = await client.bulk({ refresh: "wait_for", body: bulkBody });
                if (response.errors) {
                    console.error(`‚õî ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Sync (‡∏ö‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á Elasticsearch)`);
                    response.items.forEach((item, index) => {
                        if (item.index && item.index.error) {
                            console.error(`‚ùå ERROR (${item.index.status}):`, item.index.error);
                            failedMovies.push(bulkBody[index * 2 + 1]);
                            failedErrors.push(item.index.error);
                        }
                    });
                }
            } catch (err) {
                console.error(`‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Sync:`, err);
            }
        }

        await client.indices.refresh({ index: "movie" });

        const { count } = await client.count({ index: "movie" });

        console.log(`üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô Elasticsearch: ${count} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`);
        if (count < 2018) {
            console.warn(`‚ö†Ô∏è Elasticsearch ‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î ${2018 - count} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`);
        } else {
            console.log(`‚úÖ Sync ‡∏´‡∏ô‡∏±‡∏á‡∏Ñ‡∏£‡∏ö 2018 ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!`);
        }

        if (failedMovies.length > 0) {
            console.error(`‚õî ‡∏°‡∏µ ${failedMovies.length} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà Sync ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            fs.writeFileSync('failedMovies.json', JSON.stringify(failedMovies, null, 2));
            fs.writeFileSync('failedErrors.json', JSON.stringify(failedErrors, null, 2));
            console.log(`üìÇ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå failedMovies.json ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏•‡∏á failedErrors.json ‡πÅ‡∏•‡πâ‡∏ß`);
        }

    } catch (error) {
        console.error('‚ùå Error syncing movies:', error);
    } finally {
        mongoose.connection.close();
    }
}

deleteAndSyncMovies();
